import { test, expect } from '@playwright/test';
import dotenv from 'dotenv';
dotenv.config();

async function sendTelegramMessage(message) {
  const TG_BOT_TOKEN = process.env.TG_BOT_TOKEN;
  const TG_CHAT_ID = process.env.TG_CHAT_ID;

  if (!TG_BOT_TOKEN || !TG_CHAT_ID) {
    console.error('‚ùå TG_BOT_TOKEN –∏–ª–∏ TG_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã!');
    return;
  }

  await fetch(`https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: TG_CHAT_ID,
      text: message,
    }),
  });
}

const expectedTitle = 'Upscale ‚Äî Prop Trading in Telegram ‚Ä¢ Capital up to $100 000';

test('Test on Site A', async ({ page }) => {
  try {
    await page.goto('https://app.upscale.stormtrade.dev/sign-in');
    await expect(page).toHaveTitle(expectedTitle);
    await sendTelegramMessage('‚úÖ –°—Ç–µ–π–¥–∂ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω!');
  } catch (e) {
    await sendTelegramMessage(`‚ùå –°—Ç–µ–π–¥–∂ —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª! üò≥ ${e.message}`);
    throw e;
  }
});

test('Test on Site B', async ({ page }) => {
  try {
    await page.goto('https://app.upscale.trade/sign-in');
    await expect(page).toHaveTitle(expectedTitle);
    await sendTelegramMessage('‚úÖ –ü—Ä–æ–¥ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω!');
  } catch (e) {
    await sendTelegramMessage(`‚ùå –ü—Ä–æ–¥ —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª! üò≥ ${e.message}`);
    throw e;
  }
});
